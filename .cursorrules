# Code Context Semantic Search Rules

## ❗ MCP工具调用格式要求 - 非常重要 ❗

使用MCP工具时，必须严格遵循以下格式：

### ✅ 正确的JSON格式
```json
{
  "path": "/Users/username/project",
  "query": "搜索内容",
  "limit": 10
}
```

### ❌ 错误的XML格式（禁止使用）
```xml
<search_code>
/Users/username/project
搜索内容
</search_code>
```

### 工具示例：

**search_code工具：**
```json
{
  "path": "/Users/yuqiang/work/code/llm-mining-auditor",
  "query": "文本质检逻辑",
  "limit": 10
}
```

**get_indexing_status工具：**
```json
{
  "path": "/Users/yuqiang/work/code/llm-mining-auditor"
}
```

## 优先使用语义搜索工具

当需要在代码库中查找、搜索或理解代码时，请优先使用Code Context MCP提供的语义搜索工具，而不是依赖内置的文件浏览或关键词搜索。

### 使用指南

1. **代码搜索场景**：
   - 查找特定功能的实现
   - 寻找相关的代码片段
   - 理解代码架构和模式
   - 查找API使用示例
   - 定位bug相关代码

2. **工具使用优先级**：
   - 🥇 **首选**：使用 `search_code` 进行语义搜索
   - 🥈 **次选**：使用 `get_indexing_status` 检查索引状态
   - 🥉 **备选**：只在语义搜索无法满足需求时使用内置工具

3. **搜索策略**：
   - 使用自然语言描述要查找的功能
   - 尝试不同的查询表述方式
   - 从具体到抽象逐步调整查询
   - 如果结果太多，使用更具体的描述

### 示例查询

**好的语义查询**：
- "文件索引进度跟踪功能"
- "处理大文件的哈希计算"
- "gitignore模式匹配逻辑"
- "MCP工具注册和处理"
- "FileSynchronizer初始化代码"

**避免的查询**：
- 单个函数名或变量名（除非确实需要）
- 过于宽泛的词汇如"function"、"class"

### 索引管理

- 在开始搜索前，先检查当前代码库的索引状态
- 如果代码库未索引，先使用 `index_codebase` 建立索引
- 对于新修改的代码，考虑重新索引以获得最新结果
- **重要**：始终使用绝对路径（如 `/Users/username/project`），不要使用相对路径
- 使用项目根目录进行索引和搜索，不要使用具体文件路径

### 回退策略

只有在以下情况下才使用内置工具：
- 语义搜索无法找到相关内容
- 需要查看特定文件的完整内容
- 需要浏览目录结构
- 查找配置文件或非代码文件

## 中文用户注意

请使用中文进行回答和解释，但保持代码和技术术语的英文原样。
